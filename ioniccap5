Capítulo 5: Creación de la aplicación

Ahora que sabemos todo lo que hay que saber sobre las pruebas de nuestras aplicaciones de Ionic, y tenemos una aplicación de shell de trabajo, vamos a pasar a hacer realmente un poco de tocino!

Por lo tanto, echemos un vistazo a nuestra maqueta:

Bosquejo

Podemos ver que tanto el contenido del centro como los menús laterales tienen listas. Las listas en Ionic son muy potentes, y vienen con muchas características diferentes que comúnmente se ven en aplicaciones nativas. Por suerte, agregarlos es realmente simple.

Como estamos usando AngularJS, vamos a usar la directiva ng-repeat para crear un nuevo elemento de lista para cada tarea que tenemos en un proyecto dado:

Con el código de la lista y  Angular ng-repeat, el contenido del centro se convierte en:

<!-- Center content -->
<ion-side-menu-content>
  <ion-header-bar class="bar-dark">
    <h1 class="title">Todo</h1>
  </ion-header-bar>
  <ion-content>
    <!-- nuestra lista e items de la lista -->
      <ion-item ng-repeat="task in tasks">
        {{task.title}}
      </ion-item>
    </ion-list>
  </ion-content>
</ion-side-menu-content>

Pero esto no hace nada todavía, porque no tenemos ninguna tarea ni ningún código para impulsar nuestra aplicación. Para ello, necesitamos crear un controlador Angular y añadirlo a la página. Vamos a utilizar sólo un controlador para esta aplicación, llamado TodoCtrl. Lo vamos a agregar directamente a la etiqueta del cuerpo:

<body ng-app="todo" ng-controller="TodoCtrl">

Entonces, necesitamos definir este controlador en nuestro archivo app.js, y podemos agregar algunas tareas de prueba en:

angular.module('todo', ['ionic'])

.controller('TodoCtrl', function($scope) {
  $scope.tasks = [
    { title: 'Recoger monedas' },
    { title: 'Comer setas' },
    { title: 'Subir lo suficientemente alto para agarrar la bandera' },
    { title: 'Encuentra la princesa' }
  ];
})

Ejecute el ejemplo de nuevo, y deberíamos ver nuestra lista de tareas muy importantes!

Corriendo

Crear tareas

Está bien, así que tenemos algunos datos de prueba para las tareas, pero ¿qué hay de crearlas? Necesitamos algunas maneras de hacer eso. Trabajando con nuestros datos de prueba, vamos a agregar una simple ventana Modal que se desliza hacia arriba, dejándonos poner  una nueva tarea. Coloque la siguiente etiqueta de script después de la etiqueta de cierre </ion-side-menu> en el <body> del archivo HTML:


<script id="new-task.html" type="text/ng-template">

  <div class="modal">

    <!-- Barra de encabezado modal -->
    <ion-header-bar class="bar-secondary">
      <h1 class="title">Nueva Tarea</h1>
      <button class="button button-clear button-positive" ng-click="closeNewTask()">Cancel</button>
    </ion-header-bar>

    <!-- Area de contenido modal -->
    <ion-content>

      <form ng-submit="createTask(task)">
        <div class="list">
          <label class="item item-input">
            <input type="text" placeholder="What do you need to do?" ng-model="task.title">
          </label>
        </div>
        <div class="padding">
          <button type="submit" class="button button-block button-positive">Create Task</button>
        </div>
      </form>

    </ion-content>

  </div>

</script>

Hay mucha información en el código anterior. En primer lugar, estamos definiendo esta plantilla como una plantilla Angular usando 
<script id="new-task.html" type="text/ng-template">. Lo bueno de las plantillas Angular es que se pueden cargar desde cualquier lugar: local o remoto. La URL de la plantilla es el identificador único, y si la plantilla se define localmente, se obtendrá localmente. Las plantillas son una excelente manera de separar diseños e interfaces de usuario, por lo que los usamos ampliamente.

A continuación, establecer un encabezado con un botón para cerrar el modal, y luego configurar nuestro área de contenido. Para el formulario, estamos llamando createTask(task) cuando se envía el formulario. La tarea que se pasa a createTask es el objeto correspondiente a los datos de formulario introducidos. Dado que nuestra entrada de texto tiene ng-model="task.title", esa entrada de texto establecerá la propiedad de título del objeto de tarea.

Con el fin de activar el Modal para abrir, necesitamos un botón en la barra de encabezado principal y algún código para abrir el modal, el contenido del centro entonces se convierte en:

  <!-- Contenido del centro-->
  <ion-side-menu-content>
    <ion-header-bar class="bar-dark">
      <h1 class="title">Todo</h1>
      <!-- Nuevo botón Tarea->
      <button class="button button-icon" ng-click="newTask()">
        <i class="icon ion-compose"></i>
      </button>
    </ion-header-bar>
    <ion-content>
      <!-- Nuestra lista e items de la lista -->
      <ion-list>
        <ion-item ng-repeat="task in tasks">
          {{task.title}}
        </ion-item>
      </ion-list>
    </ion-content>
  </ion-side-menu-content>

Y en nuestro código de controlador:

angular.module('todo', ['ionic'])

.controller('TodoCtrl', function($scope, $ionicModal) {
  // No need for testing data anymore
  $scope.tasks = [];

  // Crea y carga el  Modal
  $ionicModal.fromTemplateUrl('new-task.html', function(modal) {
    $scope.taskModal = modal;
  }, {
    scope: $scope,
    animation: 'slide-in-up'
  });

  // Se llama cuando se envía el formulario

  $scope.createTask = function(task) {
    $scope.tasks.push({
      title: task.title
    });
    $scope.taskModal.hide();
    task.title = "";
  };

  // Abre nuestra nueva modalidad de tarea
  $scope.newTask = function() {
    $scope.taskModal.show();
  };

  // Cierra la nueva modalidad de tarea
  $scope.closeNewTask = function() {
    $scope.taskModal.hide();
  };
})

Ahora ejecute el ejemplo y pruebe a agregar una tarea. Debe deslizar hasta el modal y luego mostrar la nueva tarea después de presentarlo.

Adición de proyectos

Ahora podemos agregar soporte para agregar y seleccionar proyectos. Para hacer esto, vamos a hacer mucho del mismo trabajo que hicimos para la lista de tareas. Vamos a agregar una lista para mostrar los proyectos, y un botón para agregar un nuevo proyecto. También vamos a aprovechar la oportunidad de abstraer el modelo del proyecto en un servicio angular que también se encargará de guardar y cargar nuestros proyectos y tareas de localStorage.

También vamos a resbalar en algunas pequeñas cosas más para que la aplicación se sienta bien. En concreto, hemos añadido soporte para seleccionar un proyecto (y mostrar que está seleccionado) y cerrar automáticamente el menú lateral al crear un proyecto nuevo o seleccionar uno existente.

Aquí está el nuevo marcado del área de contenido:

<!-- Contenido del centro -->
<ion-side-menu-content>
  <ion-header-bar class="bar-dark">
    <button class="button button-icon" ng-click="toggleProjects()">
      <i class="icon ion-navicon"></i>
    </button>
    <h1 class="title">{{activeProject.title}}</h1>
    <!-- Nuevo botón Tarea -->
    <button class="button button-icon" ng-click="newTask()">
      <i class="icon ion-compose"></i>
    </button>
  </ion-header-bar>
  <ion-content scroll="false">
    <ion-list>
      <ion-item ng-repeat="task in activeProject.tasks">
        {{task.title}}
      </ion-item>
    </ion-list>
  </ion-content>
</ion-side-menu-content>

Y el nuevo menú lateral de marcado::


  <!-- Menú izquierdo -->
  <ion-side-menu side="left">
    <ion-header-bar class="bar-dark">
      <h1 class="title">Projectos</h1>
      <button class="button button-icon ion-plus" ng-click="newProject()">
      </button>
    </ion-header-bar>
    <ion-content scroll="false">
      <ion-list>
        <ion-item ng-repeat="project in projects" ng-click="selectProject(project, $index)" ng-class="{active: activeProject == project}">
          {{project.title}}
        </ion-item>
      </ion-list>
    </ion-content>
  </ion-side-menu>

  Esto agrega un menú secundario de proyectos, dejándonos hacer clic en cada proyecto y también agregar uno nuevo con un pequeño botón de icono más en la barra de encabezado. La directiva ng-class del 
  <ion-item> asegura agregar la clase activa al proyecto activo.

Para habilitar la adición, guardar y cargar proyectos, hemos tenido que añadir un poco de código al controlador. Esta es la nueva versión del archivo app.js:

angular.module('todo', ['ionic'])
/**
 * La fábrica de Proyectos gestiona proyectos de ahorro y carga
 * Desde el almacenamiento local, y también nos permite guardar y 
 * cargar el último índice de proyecto activo.
 */
.factory('Projects', function() {
  return {
    all: function() {
      var projectString = window.localStorage['projects'];
      if(projectString) {
        return angular.fromJson(projectString);
      }
      return [];
    },
    save: function(projects) {
      window.localStorage['projects'] = angular.toJson(projects);
    },
    newProject: function(projectTitle) {
      // Add a new project
      return {
        title: projectTitle,
        tasks: []
      };
    },
    getLastActiveIndex: function() {
      return parseInt(window.localStorage['lastActiveProject']) || 0;
    },
    setLastActiveIndex: function(index) {
      window.localStorage['lastActiveProject'] = index;
    }
  }
})

.controller('TodoCtrl', function($scope, $timeout, $ionicModal, Projects, $ionicSideMenuDelegate) {

  // Una función de utilidad para crear un nuevo proyecto
  // con el proyecto projectTitle
  var createProject = function(projectTitle) {
    var newProject = Projects.newProject(projectTitle);
    $scope.projects.push(newProject);
    Projects.save($scope.projects);
    $scope.selectProject(newProject, $scope.projects.length-1);
  }


  // Cargar o inicializar proyectos
  $scope.projects = Projects.all();

  // Tomar el último activo, o el primer proyecto
  $scope.activeProject = $scope.projects[Projects.getLastActiveIndex()];

  // Llamado para crear un nuevo proyecto
  $scope.newProject = function() {
    var projectTitle = prompt('Project name');
    if(projectTitle) {
      createProject(projectTitle);
    }
  };

  // Llamado para seleccionar el proyecto dado
  $scope.selectProject = function(project, index) {
    $scope.activeProject = project;
    Projects.setLastActiveIndex(index);
    $ionicSideMenuDelegate.toggleLeft(false);
  };

  // Crea nuestro modal
  $ionicModal.fromTemplateUrl('new-task.html', function(modal) {
    $scope.taskModal = modal;
  }, {
    scope: $scope
  });

  $scope.createTask = function(task) {
    if(!$scope.activeProject || !task) {
      return;
    }
    $scope.activeProject.tasks.push({
      title: task.title
    });
    $scope.taskModal.hide();

    // Ineficiente, pero guardar todos los proyectos
    Projects.save($scope.projects);

    task.title = "";
  };

  $scope.newTask = function() {
    $scope.taskModal.show();
  };

  $scope.closeNewTask = function() {
    $scope.taskModal.hide();
  }

  $scope.toggleProjects = function() {
    $ionicSideMenuDelegate.toggleLeft();
  };


  // Intente crear el primer proyecto, asegúrese de aplazar
  // esto usando $timeout para que todo se inicialice
  // correctamente
  $timeout(function() {
    if($scope.projects.length == 0) {
      while(true) {
        var projectTitle = prompt('Your first project title:');
        if(projectTitle) {
          createProject(projectTitle);
          break;
        }
      }
    }
  }, 1000);

})

Lo sé, que era un montón de código para saltar a la derecha, pero es en gran medida los mismos conceptos de antes, sólo con más detalles. Si ejecuta esta versión de la aplicación, ahora debería tener una aplicación muy pulida y utilizable del multi-proyecto Todo!